	
public class Solution {
    
    public static int editDistanceM(String s, String t, int[][] storage){
        
        int m = s.length();
        int n = t.length();
        
        if(m==0){
            storage[m][n] = n;
            return storage[m][n];
        }
        
        if(n==0){
            storage[m][n] = m;
            return storage[m][n];
        }
        
        if(storage[m][n] != -1){
            return storage[m][n];
        }
        
        if(s.charAt(0) == t.charAt(0)){
            
            return editDistanceM(s.substring(1), t.substring(1), storage);
            
        }else{
            
            int insert = editDistanceM(s, t.substring(1), storage);
            int remove = editDistanceM(s.substring(1), t, storage);
            int replace = editDistanceM(s.substring(1), t.substring(1), storage);
            
            int min = Math.min(insert, Math.min(remove, replace));
            
            storage[m][n] = 1 + min;
            
            return storage[m][n];
            
        }
        
    }

	public static int editDistance(String s, String t) {
		
        int m = s.length();
        int n = t.length();
        
        
        // using DP
        int storage[][] = new int[m+1][n+1];
        
        for(int i=0; i<=m; i++){
            
            storage[i][0] = i;
        }
        
        for(int j=0; j<=n; j++){
            
            storage[0][j] = j;
        }
        
        
        for(int i = 1; i <= m; i++){
            for(int j = 1; j <=n; j++){
                
                if(s.charAt(m-i) == t.charAt(n-j)){
                    
                    storage[i][j] = storage[i-1][j-1];
                    
                }else{
                    
                    storage[i][j] = 1 + Math.min( storage[i-1][j], Math.min( storage[i][j-1] , storage[i-1][j-1]));
                    
                }
                
            }
        }
        
        return storage[m][n];
        
        
        
        
        
        
        
        
        
        
        // memoization
        
        // for(int i=0; i<=m; i++){
        //     for(int j=0; j<=n; j++){
        //         storage[i][j] = -1;
        //     }
        // }
        
        
        
        
        
        //return editDistanceM(s, t, storage);
        
    }

}
