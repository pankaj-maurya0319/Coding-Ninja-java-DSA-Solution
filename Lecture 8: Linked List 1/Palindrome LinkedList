/*

	Following is the Node class already written for the Linked List

	class LinkedListNode<T> {
    	T data;
    	LinkedListNode<T> next;
    
    	public LinkedListNode(T data) {
        	this.data = data;
    	}
	}

*/

public class Solution {

	public static boolean isPalindrome(LinkedListNode<Integer> head) {
		
        
//         if(head == null || head.next == null){
//             return true;
//         }
        
//         LinkedListNode<Integer> slow= head;
//         LinkedListNode<Integer> fast = head;
//         LinkedListNode<Integer> head2;
        
        
//         while(fast.next!=null && fast.next.next!=null){
//             slow = slow.next;
//             fast = fast.next.next;
//         }
//         head2 = slow.next;
//         slow.next = null;
        
//         LinkedListNode<Integer> revHead = reverseLinkedList(head2);
//         LinkedListNode<Integer> temp = head;
        
//         while(temp!=null && revHead!=null){
//             if(temp.data!=revHead.data){
//                 return false;
//             }
//             temp = temp.next;
//             revHead = revHead.next;
//         }
//         return true;
        
        if(head == null || head.next == null){
            return true;
        }
        
        int l = length(head);
		LinkedListNode<Integer> t1 = head;
		int mid= l/2;
		boolean isPalindrome= true; 
		
        if(mid%2==0){
            for(int i = 0;i<=mid;i++) {
				t1= t1.next;
			}
        }else{
         for(int i = 0;i<mid;i++) {
			t1= t1.next;
			}   
        }
		
		LinkedListNode<Integer> t2 = null;
		 t2= t1.next;
		 t1.next= null;
        t1 = head;
		 while(t2.next!=null) {
			 if(t2.data != t1.data) {
				 isPalindrome=false;
                 break;
			 }
			
			 t1=t1.next;
			 t2=t2.next;
		 }
		 return isPalindrome;
	}
    
    public static int length(LinkedListNode<Integer> head){
    int count=0;
    while(head!=null){
        count++;
        head=head.next;
    }
    return count;
}
    

//     public static LinkedListNode<Integer> reverseLinkedList(LinkedListNode<Integer> head){
        
//         if(head==null || head.next == null){
//             return head;
//         }
        
//         LinkedListNode<Integer> tail = head.next;
//         LinkedListNode<Integer> ans = reverseLinkedList(head.next);
//         tail.next = head;
//         head.next = null;
        
//         return ans;
        
//     }
}
