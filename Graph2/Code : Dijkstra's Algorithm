import java.util.Scanner;

public class Solution {
    
    public static void dijkstra(int[][] adjancyMatrix, int n) {
		
		int v = adjancyMatrix.length;
		boolean[] visited = new boolean[n];
		int[] distance = new int[n];
		distance[0] = 0;
		
		for(int i = 1; i<n; i++) {
			distance[i] = Integer.MAX_VALUE;
		}
		
		for(int i = 0; i<v-1; i++) {
			int minVertex = findMinVertex(distance, visited);
			
			visited[minVertex] = true;
			
			for(int j=0; j<v; j++) {
				
				if(adjancyMatrix[minVertex][j] != 0 && !visited[j] ) {
					int newDistance = distance[minVertex] + adjancyMatrix[minVertex][j];
					if(newDistance < distance[j]) {
						distance[j] = newDistance;
					}
				}
			}
		}
		
		for(int i=0; i<v; i++) {
			System.out.println(i + " " + distance[i]);
		}
	}
    
    public static int findMinVertex(int[] distance, boolean[] visited) {
		
		int minVertex = -1;
		
		for(int i = 0; i<distance.length; i++) {
			if(!visited[i] && (minVertex == -1 || distance[i] < distance[minVertex])) {
				minVertex = i;
			}
		}
		return minVertex;
	}

	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		
		int V = s.nextInt();
		int E = s.nextInt();
		
		int[][] adjancyMatrix = new int[V][V];
		
		for(int i = 0; i<E; i++) {
			int v1 = s.nextInt();
			int v2 = s.nextInt();
			int weight = s.nextInt();
			
			adjancyMatrix[v1][v2] = weight;
			adjancyMatrix[v2][v1] = weight;
			
		}
		
		dijkstra(adjancyMatrix, V);
	}
}
