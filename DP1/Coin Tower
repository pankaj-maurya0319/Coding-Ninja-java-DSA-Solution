public class Solution {

	public static String findWinner(int n, int x, int y) {
		
//         boolean ans = findWinnerR(n,x,y);
        
//         if(ans){
//             return "Whis";
//         }else{
//             return "Beerus";
//         }
        
        
        
        
        // DP -- solution
        
        int storage[] = new int[n+1];

        storage[1] = 1;
        
        for(int i=2; i<=n; i++){
            
            if(i==x || i==y){
				storage[i] = 1;
                continue;
            }
            
            int op1 = storage[i-1]^1;
            int op2 =0;
            
            if(i-x >= 1){
                op2 = storage[i-x]^1;
            }
            
            int op3 =0;
            
            if(i-y >= 1){
                op3 = storage[i-y]^1;
            }
            
            storage[i] = Math.max(op1, Math.max(op2, op3));
            
        }
        
        if(storage[n] != 0){
			return "Beerus";
        }else{
            return "Whis";
        }
        
        
	}
    
//     public static boolean findWinnerR(int n, int x, int y){
        
//         if(n <= 0){
//             return true;
//         }
        
        
//         boolean op1 = findWinnerR(n-1, x,y);
//         boolean op2 = false;
//         boolean op3 = false;
        
//         if(n-x > 0){
//             op2 = findWinnerR(n-x, x, y);
//         }
        
//         if(n-y > 0){
//             op3 = findWinnerR(n-y, x, y);
//         }
        
//         boolean ans = (op1 && op2 && op3);
        
//         return ans;
        
//     }

}
