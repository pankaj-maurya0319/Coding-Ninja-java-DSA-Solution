int findPivot(vector<int>& arr,int n){
    
    int start = 0;
    int end = n-1;
   
    while(start < end){
        
        int mid = start + (end-start)/2;
        
        if(arr[mid] >= arr[0]){
            start = mid+1;
        }else{
            end = mid;
        }
    }
    return start;
}

int binarySearch(vector<int>& arr, int n, int k, int start, int end){
   
    while(start <= end){
        
        int mid = start + (end-start)/2;
        
        if(arr[mid] == k) return mid;
        
        if(arr[mid] > k){
            end = mid-1;
        }else{
            start = mid+1;
        }
    }
   return -1;
}

int findPosition(vector<int>& arr, int n, int k)
{
    int pivot = findPivot(arr, n);
    
    if( arr[pivot] == k) {
        return pivot;
    }
    
    if(k > arr[pivot] && k <= arr[n-1]){
        
        return binarySearch(arr, n, k, pivot+1, n-1);
    }else{
        
        return binarySearch(arr, n, k, 0, pivot-1);
    }
}

