public class solution {

	// Return a 2D array that contains all the subsets which sum to k
	public static int[][] subsetsSumK(int input[], int k) {
        
        return subsetsSumK(input,k,0);

	}
    
    public static int[][] subsetsSumK(int input[], int k, int index){
        
        if(k<=0){
            if(k==0){
                int ans[][] = new int[1][0];
                return ans;
            }
            return new int[0][0];
        }
        
        if(index>=input.length){
            // if(k==0){
            //     int ans[][] = new int[1][0];
            //     return ans;
            // }else{
                return new int[0][0];
           // }
            
        }
        
        int smallAns[][] = subsetsSumK(input,k-input[index],index+1);
        
        int ans[][] = subsetsSumK(input,k,index+1);
        
        int finalAns[][] = new int [smallAns.length+ans.length][];
        int l=0;
         for(int i=0; i<ans.length; i++){
            finalAns[i] = new int[ans[i].length];
            for(int j=0; j<ans[i].length; j++){
                finalAns[i][j] = ans[i][j];      
            }
            l++;
        }
        
        for(int i=0; i<smallAns.length; i++){
            
            finalAns[i+l] = new int[smallAns[i].length+1];
            finalAns[i+l][0] = input[index];
            for(int j=1; j<smallAns[i].length+1; j++){
                finalAns[i+l][j] = smallAns[i][j-1];
            }
        }
       
        
        
        return finalAns;
    }
    
}
