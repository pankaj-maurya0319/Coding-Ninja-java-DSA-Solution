/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/
import java.util.*;

public class Solution {

	public static boolean isNodePresent(BinaryTreeNode<Integer> root, int x) {
	    //Your code goes here
        
        if(root == null)
            return false;
        
        if(root.data == x)
            return true;
        
        Queue<BinaryTreeNode<Integer>> pendingNodes = new LinkedList<>();
        
        pendingNodes.add(root);
        
        while(!pendingNodes.isEmpty()){
            
            BinaryTreeNode<Integer> front = pendingNodes.remove();
            
            if(front.left!=null){
                if(front.left.data == x){
                    return true;
                }
                pendingNodes.add(front.left);
            }
            
             if(front.right!=null){
                if(front.right.data == x){
                    return true;
                }
                pendingNodes.add(front.right);
            }
            
        }
        return false;
	}

}
