public class Solution {
	
	private boolean dfs(char [][]mat, boolean [][]visited, int i, int j, String toFind, int idx, int []dx, int []dy) {
        
        if(idx == toFind.length()) return true;
        
		visited[i][j] = true;        
        for(int k = 0; k < 8; k++) {
            
            int nI = dx[k] + i, nJ = dy[k] + j;
            if((nI >= 0 && nI < mat.length) && (nJ >= 0 && nJ < mat[0].length)) {
                
                if(mat[nI][nJ] == toFind.charAt(idx) && !visited[nI][nJ]) {
                    visited[nI][nJ] = true;
                    boolean ans = dfs(mat, visited, nI, nJ, toFind, idx + 1, dx, dy);
                    if(ans) return true;
                }
            }
        }
        
		visited[i][j] = false;
        return false;
    }
    
	int solve(String[] Graph , int N, int M) {

        String toFind = "CODINGNINJA";
        int dx[] = new int[]{0, 1, 1, 1, 0, -1, -1, -1};
        int dy[] = new int[]{1, 1, 0, -1, -1, -1, 0, 1};
        
        //converting into matrix
        char[][] mat = new char[N][M];
        for(int i = 0; i < Graph.length; i++) {
            String str = Graph[i];
            for(int j = 0; j < str.length(); j++) mat[i][j] = str.charAt(j);
        }
    
        //searching for letter 'C'
		boolean [][]visited = new boolean[N][M];
        for(int i = 0; i < N; i++) 
            for(int j = 0; j < M; j++) 
                if(mat[i][j] == 'C') {
                    boolean found = dfs(mat, visited, i, j, toFind, 1, dx, dy);
                    if(found) return 1;
                }
        
        
        return 0;
    }
	
}
