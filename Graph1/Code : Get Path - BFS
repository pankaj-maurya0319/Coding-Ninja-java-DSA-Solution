import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Scanner;
import java.util.HashMap;
import java.util.*;
public class Solution {
    
    public static ArrayList<Integer> getPathBFS(int[][] edges, boolean[] visited, int start, int end){
        
        if(start==end){
            ArrayList<Integer> ans = new ArrayList<>();
            ans.add(start);
            return ans;
        }
        
        HashMap<Integer, Integer> map = new HashMap<>();
        
        Queue<Integer> pendingNodes = new LinkedList<>();
        pendingNodes.add(start);
        visited[start] = true;
        int n = edges.length;
        boolean path = false;
        
        while(!pendingNodes.isEmpty() && pendingNodes.peek()!=end){
            
            int front = pendingNodes.remove();
            
            for(int i=0; i<n; i++){
                
                if(edges[front][i] == 1 && !visited[i]){
                    pendingNodes.add(i);
                    map.put(i,front);
                    visited[i] = true;
                }
            }
        }
        
        if(map.containsKey(end)){
            
            ArrayList<Integer> ans = new ArrayList<>();
            ans.add(end);
            
            int value = map.get(end);
            while(value != start){
                ans.add(value);
                value = map.get(value);
            }
            ans.add(start);
            return ans;
        }
        
        return null;
    }
	
	public static void main(String[] args)  throws NumberFormatException, IOException{
        
        int n;
		int e;
		Scanner s = new Scanner(System.in);
		
		n = s.nextInt();
		e = s.nextInt();
		
		int edges[][] = new int[n][n];
		
		for(int i=0; i<e; i++) {
			
			int fv = s.nextInt();
			int sv = s.nextInt();
			edges[fv][sv] = 1;
			edges[sv][fv] = 1;
			
		}
        int start = s.nextInt();
        int end = s.nextInt();
        
        boolean[] visited = new boolean[edges.length];
        ArrayList<Integer> ans = getPathBFS(edges, visited, start, end);
        
        if(ans == null){
            return ;
        }
        
        for(int i=0; i<ans.size(); i++){
            System.out.print( ans.get(i) + " ");
        }
	}
}
