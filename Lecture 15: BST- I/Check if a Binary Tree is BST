/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

 */

public class Solution {

	public static boolean isBST(BinaryTreeNode<Integer> root) {

		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
        */
        
        // 1st approach 
//         if( root == null ){
//             return true;
//         }
        
//         if(root.left!=null ){
//             if(root.data < root.left.data){
//                 return false;
//             }
//             return  isBST(root.left);
//         }
        
//         if(root.right!=null){
            
//             if(root.data >= root.right.data){
//                 return false;
//             }
            
//             return  isBST(root.right);
            
//         }
        

//         return true;
        
        // second approach
        
        if(root == null)
            return true;
        
        int leftMax = maximum(root.left);
        int rightMin = minimum(root.right);
        
        if(root.data <= leftMax){
            return false;
        }
        
        if(root.data > rightMin){
            return false;
        }
        
        boolean isLeftBST = isBST(root.left);
        boolean isRightBST = isBST(root.right);
        
        if(isLeftBST && isRightBST){
            return true;
        }else{
            return false;
        }
        
	}
    
    public static int minimum(BinaryTreeNode<Integer> root){
        
        if(root == null){
            return Integer.MAX_VALUE;
        }
        
        return Math.min(root.data, Math.min(minimum(root.left) , minimum(root.right)));
        
    }
    
        
    public static int maximum(BinaryTreeNode<Integer> root){
        
        if(root == null){
            return Integer.MIN_VALUE;
        }
        
        return Math.max(root.data, Math.max(maximum(root.left) , maximum(root.right)));
        
    }


}
