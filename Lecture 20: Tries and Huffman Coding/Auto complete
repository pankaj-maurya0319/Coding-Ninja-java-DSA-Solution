import java.util.ArrayList;

class TrieNode{
	char data;
	boolean isTerminating;
	TrieNode children[];
	int childCount;

	public TrieNode(char data) {
		this.data = data;
		isTerminating = false;
		children = new TrieNode[26];
		childCount = 0;
	}
}

public class Trie {
	private TrieNode root;
	public int count;
	public Trie() {
		root = new TrieNode('\0');
	}

	private void add(TrieNode root, String word){
		if(word.length() == 0){
			root.isTerminating = true;
			return;
		}		
		int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];
		if(child == null){
			child = new TrieNode(word.charAt(0));
			root.children[childIndex] = child;
			root.childCount++;
		}
		add(child, word.substring(1));
	}

	public void add(String word){
		add(root, word);
	}
	
	
	public void autoComplete(ArrayList<String> input, String word) {
        
        for(int i=0; i<input.size(); i++){
             add(input.get(i));
        }
        
        TrieNode present = findWord(word, root);
        
        if(present!=null){
            printPossible(present, word, "");
        }
        

    }
    
    public TrieNode findWord(String word, TrieNode root){
		
        if(word.length()==0){
			return root;
        }
        
        int childIndex = word.charAt(0) - 'a';
        TrieNode child = root.children[childIndex];
        
        if(child==null){
            return null;
        }
        
        return findWord(word.substring(1), child);
        
    }
    
    public void printPossible(TrieNode root, String word, String output){
        
        if(root.childCount == 0){
            
            if(output.length()>0){
                System.out.println(word + output);
            }
            return ;
        }
        
        if(root.isTerminating){
			System.out.println(word + output);
        }
        
        for(int i=0; i<root.children.length; i++){
            
            if(root.children[i] != null){
                String ans = output + root.children[i].data;
                printPossible(root.children[i], word, ans);
            }
            
        }
        
        
        
        
    }

}
