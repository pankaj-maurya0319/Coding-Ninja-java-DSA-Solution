/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/
import java.util.Queue;
import java.util.LinkedList;
public class Solution {

	public static void printLevelWise(BinaryTreeNode<Integer> root) {
		//Your code goes here
        Queue<BinaryTreeNode<Integer>> pendingNodes=new LinkedList<>();
		if(root==null)
			return;
		pendingNodes.add(root);
		
		while(!pendingNodes.isEmpty()) {
            
			BinaryTreeNode<Integer> front=pendingNodes.remove();
            
			System.out.print(front.data+":");
			
			if(front.left!=null) {
			pendingNodes.add(front.left);
			System.out.print("L:"+front.left.data+",");
			}else{
                 System.out.print("L:-1,");
            }
            
            // if(front.left==null)
            //     System.out.print("L:-1,");
                
			if(front.right!=null) {
				pendingNodes.add(front.right);
				System.out.print("R:"+front.right.data);
                }else{
                  System.out.print("R:-1");
            }
            // if(front.right==null)
            //     System.out.print("R:-1");
			System.out.println();
		}
	}
	
}
