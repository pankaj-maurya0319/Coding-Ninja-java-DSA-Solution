import java.util.LinkedList;
import java.util.Queue;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Scanner;

public class Solution {
    
    public static void printHelperBFS(int[][] edges, int sv, boolean[] visited){
        
        Queue<Integer> pendingNodes = new LinkedList<>();
        
        pendingNodes.add(sv);
        visited[sv] = true;
        int n = edges.length;
        
        while(!pendingNodes.isEmpty()){
            
            int front = pendingNodes.remove();
            System.out.print(front + " ");
            
            for(int i=0; i<n; i++){
                if(edges[front][i]==1 && !visited[i]){
                    pendingNodes.add(i);
                    visited[i] = true;
                }
            }
            //System.out.println();
        }
    }
    
    public static void printBFS(int[][] edges){
        
        boolean[] visited = new boolean[edges.length];
        
        for(int i=0; i<edges.length; i++){
            
            if(!visited[i]){
                
                printHelperBFS(edges, i, visited);
            }
        }
    }

	public static void main(String[] args) throws NumberFormatException, IOException {
        
        Scanner s = new Scanner(System.in);
        int n = s.nextInt();
        int e = s.nextInt();
        
        int[][] edges = new int[n][n];
        
        for(int i=0; i<e; i++){
            
            int fv = s.nextInt();
            int sv = s.nextInt();
            
            edges[fv][sv] = 1;
            edges[sv][fv] = 1;
        }
        
        printBFS(edges);
	}

}
