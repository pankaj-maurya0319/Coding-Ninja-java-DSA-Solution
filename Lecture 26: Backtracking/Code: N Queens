
public class Solution {
    
    public static void print(int[][] board, int n){
        
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                
                System.out.print(board[i][j] + " ");
            }
        }
        System.out.println();
    }
    
    public static boolean isSafe(int row, int col, int[][] board, int n){
        
        int r = row;
        int c = col;
        
        while(c >= 0){
            
            if(board[r][c]==1) return false;
            c--;
        }
        
        c = col;
        
        while(r >= 0 && c >= 0){
            
            if(board[r][c]==1) return false;
            r--;
            c--;
        }
        
        r = row;
        c = col;
        
        while( c>= 0 && r < n){
            
            if(board[r][c]==1) return false;
            r++;
            c--;
        }
        
        return true;
        
    }
    
    public static void solve(int col, int[][]  board, int n){
        
        // base
        if(col==n){
            print(board,n);
            return ;
        }
        
        // do for 1 case and recursion will handle other cases
        
        for(int row = 0; row<n; row++){
            
            if( isSafe(row, col, board, n)){
                
                board[row][col] = 1;
                
                solve(col+1, board, n);
                
                board[row][col] = 0;
            }
        }
    }
	
		
public static void placeNQueens(int n){
	
    
    int[][] board = new int[n][n];
    
    solve(0, board, n);
		
	}
	
}
